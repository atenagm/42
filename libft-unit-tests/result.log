ft_strncpy:    [OK] [OK] [OK] [FAILED] [OK] [FAILED] [FAILED] [OK] [OK] [OK] [OK] 
[fail]: your strncpy does not work with an empty string
Test code:
	char *src = "";
	char dst1[30];
	char dst2[30];
	size_t max = 29;

	memset(dst1, 'B', sizeof(dst1));
	memset(dst2, 'B', sizeof(dst2));
	strncpy(dst1, src, max);
	ft_strncpy(dst2, src, max);
	if (memcmp(dst1, dst2, 29))
	{
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);

Diffs:
     strncpy: ||
  ft_strncpy: ||

[fail]: your strncpy does not fill with \0 the rest of the dest buffer
Test code:
	char *src = "stars";
	char dst1[50];
	char dst2[50];
	size_t max = 50;

	memset(dst1, 'B', sizeof(dst1));
	memset(dst2, 'B', sizeof(dst2));
	strncpy(dst1, src, max);
	ft_strncpy(dst2, src, max);
	if (memcmp(dst1, dst2, max))
	{
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);

Diffs:
     strncpy: |stars|
  ft_strncpy: |stars|

[fail]: your strncpy put the bad number of \0 at the end of the string
Test code:
	char *src = "len\0AAAAAAAAAAAA";
	char dst1[] = "BBBBBBBBBBBBBBBBBBBB";
	char dst2[] = "BBBBBBBBBBBBBBBBBBBB";
	size_t len = strlen(dst1);

	strncpy(dst1, src, 7);
	ft_strncpy(dst2, src, 7);
	for (size_t i = 0; i < len; i++)
		if (dst1[i] != dst2[i])
		{
			for (size_t it = 0; it < len; it++)
			for (size_t it = 0; it < len; it++)
			exit(TEST_FAILED);
		}
		exit(TEST_SUCCESS);

Diffs:
     strncpy: |\x6c\x65\x6e\x00\x00\x00\x00\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42|
  ft_strncpy: |\x6c\x65\x6e\x00\x41\x41\x41\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42|

